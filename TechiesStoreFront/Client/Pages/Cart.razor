@page "/cart"
@attribute [Authorize]
@inject HttpClient http
@inject PublicClient PublicClient
@inject Blazored.LocalStorage.ILocalStorageService ProtectedLocalStore
@inject NavigationManager navigation
@using TechiesStoreFront.Shared.Models.ProductModels
@using TechiesStoreFront.Shared.Models.TransactionModels
@using TechiesStoreFront.Shared.Models.OrderedItemModels
@using TechiesStoreFront.Shared.Models.Cart
@using TechiesStoreFront.Client.Pages.Modals 

@if (_products == null)
{
    <p>Attempting to load cart... Please make sure your cart is not empty.</p>
}
else
{
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">
    <div class="container padding-bottom-3x mb-1">
        <!-- Alert-->
        <div class="alert alert-info alert-dismissible fade show text-center" style="margin-bottom: 30px;"><span class="alert-close" data-dismiss="alert"></span><img class="d-inline align-center" src="data:image/svg+xml;utf8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeD0iMHB4IiB5PSIwcHgiIHZpZXdCb3g9IjAgMCA1MTIuMDAzIDUxMi4wMDMiIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDUxMi4wMDMgNTEyLjAwMzsiIHhtbDpzcGFjZT0icHJlc2VydmUiIHdpZHRoPSIxNnB4IiBoZWlnaHQ9IjE2cHgiPgo8Zz4KCTxnPgoJCTxnPgoJCQk8cGF0aCBkPSJNMjU2LjAwMSw2NGMtNzAuNTkyLDAtMTI4LDU3LjQwOC0xMjgsMTI4czU3LjQwOCwxMjgsMTI4LDEyOHMxMjgtNTcuNDA4LDEyOC0xMjhTMzI2LjU5Myw2NCwyNTYuMDAxLDY0eiAgICAgIE0yNTYuMDAxLDI5OC42NjdjLTU4LjgxNiwwLTEwNi42NjctNDcuODUxLTEwNi42NjctMTA2LjY2N1MxOTcuMTg1LDg1LjMzMywyNTYuMDAxLDg1LjMzM1MzNjIuNjY4LDEzMy4xODQsMzYyLjY2OCwxOTIgICAgIFMzMTQuODE3LDI5OC42NjcsMjU2LjAwMSwyOTguNjY3eiIgZmlsbD0iIzUwYzZlOSIvPgoJCQk8cGF0aCBkPSJNMzg1LjY0NCwzMzMuMjA1YzM4LjIyOS0zNS4xMzYsNjIuMzU3LTg1LjMzMyw2Mi4zNTctMTQxLjIwNWMwLTEwNS44NTYtODYuMTIzLTE5Mi0xOTItMTkycy0xOTIsODYuMTQ0LTE5MiwxOTIgICAgIGMwLDU1Ljg1MSwyNC4xMjgsMTA2LjA2OSw2Mi4zMzYsMTQxLjE4NEw2NC42ODQsNDk3LjZjLTEuNTM2LDQuMTE3LTAuNDA1LDguNzI1LDIuODM3LDExLjY2OSAgICAgYzIuMDI3LDEuNzkyLDQuNTY1LDIuNzMxLDcuMTQ3LDIuNzMxYzEuNjIxLDAsMy4yNDMtMC4zNjMsNC43NzktMS4xMDlsNzkuNzg3LTM5Ljg5M2w1OC44NTksMzkuMjMyICAgICBjMi42ODgsMS43OTIsNi4xMDEsMi4yNCw5LjE5NSwxLjI4YzMuMDkzLTEuMDAzLDUuNTY4LTMuMzQ5LDYuNjk5LTYuNGwyMy4yOTYtNjIuMTQ0bDIwLjU4Nyw2MS43MzkgICAgIGMxLjA2NywzLjE1NywzLjU0MSw1LjYzMiw2LjY3Nyw2LjcyYzMuMTM2LDEuMDY3LDYuNTkyLDAuNjQsOS4zNjUtMS4yMTZsNTguODU5LTM5LjIzMmw3OS43ODcsMzkuODkzICAgICBjMS41MzYsMC43NjgsMy4xNTcsMS4xMzEsNC43NzksMS4xMzFjMi41ODEsMCw1LjEyLTAuOTM5LDcuMTI1LTIuNzUyYzMuMjY0LTIuOTIzLDQuMzczLTcuNTUyLDIuODM3LTExLjY2OUwzODUuNjQ0LDMzMy4yMDV6ICAgICAgTTI0Ni4wMTcsNDEyLjI2N2wtMjcuMjg1LDcyLjc0N2wtNTIuODIxLTM1LjJjLTMuMi0yLjExMi03LjMxNy0yLjM4OS0xMC42ODgtMC42NjFMOTQuMTg4LDQ3OS42OGw0OS41NzktMTMyLjIyNCAgICAgYzI2Ljg1OSwxOS40MzUsNTguNzk1LDMyLjIxMyw5My41NDcsMzUuNjA1TDI0Ni43LDQxMS4yQzI0Ni40ODcsNDExLjU2MywyNDYuMTY3LDQxMS44NCwyNDYuMDE3LDQxMi4yNjd6IE0yNTYuMDAxLDM2Mi42NjcgICAgIEMxNjEuOSwzNjIuNjY3LDg1LjMzNSwyODYuMTAxLDg1LjMzNSwxOTJTMTYxLjksMjEuMzMzLDI1Ni4wMDEsMjEuMzMzUzQyNi42NjgsOTcuODk5LDQyNi42NjgsMTkyICAgICBTMzUwLjEwMywzNjIuNjY3LDI1Ni4wMDEsMzYyLjY2N3ogTTM1Ni43NTksNDQ5LjEzMWMtMy40MTMtMS43MjgtNy41MDktMS40NzItMTAuNjg4LDAuNjYxbC01Mi4zNzMsMzQuOTIzbC0zMy42NDMtMTAwLjkyOCAgICAgYzQwLjM0MS0wLjg1Myw3Ny41ODktMTQuMTg3LDEwOC4xNi0zNi4zMzFsNDkuNTc5LDEzMi4yMDNMMzU2Ljc1OSw0NDkuMTMxeiIgZmlsbD0iIzUwYzZlOSIvPgoJCTwvZz4KCTwvZz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8L3N2Zz4K" width="18" height="18" alt="Medal icon">&nbsp;&nbsp;With this purchase you will earn <strong>@SetRewardsPoints(_products)</strong> Reward Points.</div>
        <!-- Shopping Cart-->
        <div class="table-responsive shopping-cart">
            <table class="table">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th class="text-center">Quantity</th>
                            <th class="text-center">Subtotal</th>
                            <th class="text-center">Discount</th>
                            <th class="text-center"><a class="btn btn-sm btn-outline-danger" @onclick="() => EmptyCart()">Clear Cart</a></th>
                        </tr>
                    </thead>
                @foreach (ProductDetail product in _products)
                {
                    <tbody>
                        <tr>
                            <td>
                                <div class="product-item">
                                    <a class="product-thumb"><img src="/images/products/product@(product.Id).jpg" alt="Product"></a>
                                    <div class="product-info">
                                        <h4 class="product-title"><a @onclick="() => ShowDetailModal(product.Id)">@product.Name</a></h4>
                                    </div>
                                </div>
                            </td>
                            <td class="text-center">
                                <div class="count-input">
                                    <select id="count" class="form-control" @bind-value="selectedQuantity" @bind-value:event="oninput">
                                        <option value="1">1</option>
                                    </select>
                                </div>
                            </td>
                            <td class="text-center text-lg text-medium">$@SetPriceByQuantity(selectedQuantity, product.Price)</td>
                            <td class="text-center text-lg text-medium">$@SetDiscountAmount(product.Price, priceDiscount)</td>
                            <td class="text-center"><button class="remove-from-cart" @onclick="() => RemoveItemFromCart(product.Id)"><i class="fa fa-trash"></i></button></td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
        <div class="shopping-cart-footer">
            <div class="column">
                <div class="coupon-form">
                    <input class="form-control form-control-sm" type="text" placeholder="Coupon code" @bind-value="couponCodeString" @bind-value:event="oninput">
                    <button class="btn btn-outline-primary btn-sm" @onclick="() => SetCouponDiscount(couponCodeString)">Apply Coupon</button>
                </div>
            </div>
            <div class="column text-lg">Subtotal: <span class="text-medium">$@SetPriceTotal(_products, priceDiscount)</span></div>
        </div>
        <div class="shopping-cart-footer">
            <div class="column"><a class="btn btn-outline-secondary" href="#"><i class="icon-arrow-left"></i>&nbsp;Back to Shopping</a></div>
            @if (ShoppingCart.Items.Count == 0)
            {
                IsDisabled = true;
            }
            else
            {
                IsDisabled = false;
            }
            <div class="column"><button class="btn btn-success" @onclick="@(() => { Checkout(_products); Modal.Show<SubmittedOrderModal>("Order Success"); })" disabled="@IsDisabled">Checkout</button></div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    CartStateProvider CartStateProvider { get; set; } = new();
    [CascadingParameter]
    public IModalService Modal { get; set; }
    public CartModel ShoppingCart { get; set; } = new();
    public List<ProductDetail> _products { get; set; }
    public int selectedQuantity { get; set; } = 1;
    public double priceDiscount { get; set; } = 0;
    public double discountedPrice { get; set; }
    public string couponCodeString { get; set; }
    public bool IsDisabled { get; set; }
    private TransactionCreate TransactionModel = new();
    private OrderedItemCreate OrderedItemModel = new();

    protected override async Task OnInitializedAsync()
    {
        ShoppingCart = await ProtectedLocalStore.GetItemAsync<CartModel>("MyShoppingCart");

        if (ShoppingCart is not null)
        {
            _products = ShoppingCart.Items;
        }
    }

    private double SetPriceTotal(List<ProductDetail> products, double discountAmount)
    {
        double total = 0;
        if (products == null)
        {
            return total;
        }

        if (discountAmount == 0)
        {

            foreach (var p in products)
            {
                total += p.Price;
            }
        }
        else
        {
            foreach (var p in products)
            {
                total += p.Price;
            }
            total = total * discountAmount;
        }

        return Math.Round(total, 2, MidpointRounding.AwayFromZero);
    }

    private double SetRewardsPoints(List<ProductDetail> products)
    {
        double output = 0;
        double totalPrice = SetPriceTotal(products, priceDiscount);
        output = totalPrice / 3;

        return Math.Round(output, 0);
    }

    private double SetPriceByQuantity(int quantity, double price)
    {
        double output;
        output = quantity * price;

        return Math.Round(output, 2, MidpointRounding.AwayFromZero);
    }

    private double SetDiscountAmount(double price, double discount)
    {
        double output = 0;
        if (discount > 0)
        {
            output = price - (price * discount);
            return Math.Round(output, 2, MidpointRounding.AwayFromZero);
        }
        else
        {
            return 0;
        }
    }

    protected async Task SetCouponDiscount(string couponCode)
    {
        switch (couponCode)
        {
            case "tech2022":
                priceDiscount = .90;
                break;
            case "catsrule":
                priceDiscount = .75;
                break;
            case "vendorpromo1":
                priceDiscount = .50;
                break;
            default:
                priceDiscount = 0;
                break;
        }

        ShowCouponModal(priceDiscount);
    }

    void ShowCouponModal(double discountAmount)
    {
        if (discountAmount == 0)
        {
            Modal.Show<CouponFailedModal>("Invalid Coupon Code");
        }
        else
        {
            Modal.Show<CouponAddedModal>("Coupon Code Added!");
        }

    }

    protected async Task RemoveItemFromCart(int key)
    {
        if (key != 0)
        {
            CartStateProvider.ShoppingCart.Items.RemoveAll(p => p.Id == key);
            _products.RemoveAll(p => p.Id == key);
            await CartStateProvider.SaveChangesAsync();
        }
    }

    protected async Task Checkout(List<ProductDetail> products)
    {
        double total = 0;
        TransactionModel.AmountSpent = 0;
        if (products is null)
        {
            return;
        }

        foreach (var p in products)
        {
            total += p.Price;
        }

        if (priceDiscount > 0)
        {
            total = total * priceDiscount;
        }

        TransactionModel.AmountSpent = Math.Round(total, 2, MidpointRounding.AwayFromZero);

        var createTransaction = await http.PostAsJsonAsync<TransactionCreate>("api/Transaction", TransactionModel);
        if (createTransaction.IsSuccessStatusCode)
        {
            TransactionDetail transactionDetail = await http.GetFromJsonAsync<TransactionDetail>($"/api/Transaction/last");

            OrderedItemModel.TransactionId = transactionDetail.Id;

            foreach (var p in products)
            {
                OrderedItemModel.ProductId = p.Id;
                OrderedItemModel.QuantityOrdered = 1;

                var createOrderedItem = await http.PostAsJsonAsync<OrderedItemCreate>("api/OrderedItem", OrderedItemModel);
            }
        }
        await EmptyCart();
    }

    protected async Task EmptyCart()
    {
        _products.Clear();
        CartStateProvider.ShoppingCart.Items.Clear();
        await CartStateProvider.SaveChangesAsync();
    }

    void ShowDetailModal(int productId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ProductDetailModal.ProductId), productId);
        var options = new ModalOptions { ContentScrollable = true };

        Modal.Show<ProductDetailModal>("Product Details", parameters, options);
    }
}
